{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Home pack-it is a command line tool for managing simple modpacks to share with your friends.","title":"Home"},{"location":"index.html#home","text":"pack-it is a command line tool for managing simple modpacks to share with your friends.","title":"Home"},{"location":"install.html","text":"Installation Hop over to the GitHub releases and download the latest version for your operating system. If you are on windows, download pack-it.exe , and on linux download pack-it . If you are on macOS you need to compile pack-it yourself using cargo build --release ; this may change in future. Once you have downloaded the executable, you probably want to place it in a folder that is included in the PATH environment variable, for example ~/.local/bin on linux (might be distribution dependent) To verify that it works, open a terminal (or command prompt/powershell on Windows) and run pack-it --version . If it is working, you should see pack-it <version> displayed:","title":"Installation"},{"location":"install.html#installation","text":"Hop over to the GitHub releases and download the latest version for your operating system. If you are on windows, download pack-it.exe , and on linux download pack-it . If you are on macOS you need to compile pack-it yourself using cargo build --release ; this may change in future. Once you have downloaded the executable, you probably want to place it in a folder that is included in the PATH environment variable, for example ~/.local/bin on linux (might be distribution dependent) To verify that it works, open a terminal (or command prompt/powershell on Windows) and run pack-it --version . If it is working, you should see pack-it <version> displayed:","title":"Installation"},{"location":"usage-advanced.html","text":"Advanced usage Editing pack.toml manually Warning Any comments added to the pack.toml file WILL BE LOST if you use any pack-it command that updates the file; eg. *-add , remove , etc. File layout Modrinth metadata 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # Basic metadata about the pack pack_name = \"Example Pack\" author = \"Tom_The_Geek\" accepted_game_versions = [\"1.16.5\", \"1.16.4\"] mod_loader = \"fabric\" # Each mod is a value under installed_mods [installed_mods.terra] # The name of the mod, as used in console output. For mods from Modrinth, this will be the slug name = \"terra\" # The URL where the file can be downloaded download_url = \"https://cdn.modrinth.com/data/FIlZB9L0/versions/fabric-5.3.3-BETA+5dd00db8/Terra-fabric-5.3.3-BETA+5dd00db8-shaded-mapped.jar\" # The SHA-1 hash of the file to download download_hash = \"5ffed3a47cf09f192c52fb6476ad7bbca406794e\" # Where to save the file after it is downloaded output_path = \"./mods/Terra-fabric-5.3.3-BETA+5dd00db8-shaded-mapped.jar\" # Mods that are added from a supported service also attach some metadata about where they are from, # so they can be updated automatically. This is not required, and can be omitted [installed_mods.terra.update_info] # This is always 'mr' for mods downloaded from Modrinth type = \"mr\" # The ID of the project on Modrinth project_id = \"FIlZB9L0\" # The ID of the particular version on Modrinth version_id = \"9DWPUHbr\" CurseForge metadata All the fields are the same as those above, except for the [installed_mods.<mod name>.update_info] 1 2 3 4 5 6 7 [installed_mods.simplex-terrain-generation.update_info] # This is always 'cf' for mods downloaded from CurseForge type = \"cf\" # The addon (mod) ID on CurseForge addon_id = 352997 # The file ID on CurseForge file_id = 3133994 GitHub metadata All the fields are the same as those above, except for the [installed_mods.<mod name>.update_info] 1 2 3 4 5 6 7 8 9 [installed_mods.leukocyte.update_info] # This is always 'gh' for mods downloaded from GitHub type = \"gh\" # This is the username or organisation name that owns the repository owner = \"NucleoidMC\" # This is the name of the repository to download the release from repo = \"leukocyte\" # This is the git tag that the release is tied to tag = \"v0.3.0\" Adding other mods Sometimes you may want to include a mod that isn't hosted on one of the supported services, and might want to manually add it. Fortunately this isn't too difficult, and some steps will be outlined below: Find the download URL of the mod JAR, for example https://example.com/mod-1.0.0.jar In order for pack-it to verify that the JAR has downloaded correctly, you need to calculate the SHA-1 hash of the file. A quick way to do this on linux is with the following command: 1 curl <download url> | sha1sum What does that command do? If you are curious as to what the command does does (good for you :D), then you can have a look at an explanation on explainshell It will output something like the following: 1 4a3ce8ee11e091dd7923f4d8c6e5b5e41ec7c047 - The first part of this (the 40 hex characters) is the hash that you need. Add the following new section to your pack.toml file, being sure to replace all the values 1 2 3 4 5 [installed_mods.<mod name>] name = \"<mod name>\" download_url = \"<download url>\" download_hash = \"<hash that was calculated in step 2>\" output_path = \"./mods/<file name>.jar\" Adding things other than mods pack-it can be used to automatically download other files as well as just your mods; eg. resource packs or config files. As long as you can host the file on a webserver somewhere (eg. GitHub Pages or Vercel ), you can distribute them with the pack simply by including them as an installed_mods , with a different output_path set. See Adding other mods for more details on the process","title":"Advanced usage"},{"location":"usage-advanced.html#advanced-usage","text":"","title":"Advanced usage"},{"location":"usage-advanced.html#editing-packtoml-manually","text":"Warning Any comments added to the pack.toml file WILL BE LOST if you use any pack-it command that updates the file; eg. *-add , remove , etc.","title":"Editing pack.toml manually"},{"location":"usage-advanced.html#file-layout","text":"","title":"File layout"},{"location":"usage-advanced.html#modrinth-metadata","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # Basic metadata about the pack pack_name = \"Example Pack\" author = \"Tom_The_Geek\" accepted_game_versions = [\"1.16.5\", \"1.16.4\"] mod_loader = \"fabric\" # Each mod is a value under installed_mods [installed_mods.terra] # The name of the mod, as used in console output. For mods from Modrinth, this will be the slug name = \"terra\" # The URL where the file can be downloaded download_url = \"https://cdn.modrinth.com/data/FIlZB9L0/versions/fabric-5.3.3-BETA+5dd00db8/Terra-fabric-5.3.3-BETA+5dd00db8-shaded-mapped.jar\" # The SHA-1 hash of the file to download download_hash = \"5ffed3a47cf09f192c52fb6476ad7bbca406794e\" # Where to save the file after it is downloaded output_path = \"./mods/Terra-fabric-5.3.3-BETA+5dd00db8-shaded-mapped.jar\" # Mods that are added from a supported service also attach some metadata about where they are from, # so they can be updated automatically. This is not required, and can be omitted [installed_mods.terra.update_info] # This is always 'mr' for mods downloaded from Modrinth type = \"mr\" # The ID of the project on Modrinth project_id = \"FIlZB9L0\" # The ID of the particular version on Modrinth version_id = \"9DWPUHbr\"","title":"Modrinth metadata"},{"location":"usage-advanced.html#curseforge-metadata","text":"All the fields are the same as those above, except for the [installed_mods.<mod name>.update_info] 1 2 3 4 5 6 7 [installed_mods.simplex-terrain-generation.update_info] # This is always 'cf' for mods downloaded from CurseForge type = \"cf\" # The addon (mod) ID on CurseForge addon_id = 352997 # The file ID on CurseForge file_id = 3133994","title":"CurseForge metadata"},{"location":"usage-advanced.html#github-metadata","text":"All the fields are the same as those above, except for the [installed_mods.<mod name>.update_info] 1 2 3 4 5 6 7 8 9 [installed_mods.leukocyte.update_info] # This is always 'gh' for mods downloaded from GitHub type = \"gh\" # This is the username or organisation name that owns the repository owner = \"NucleoidMC\" # This is the name of the repository to download the release from repo = \"leukocyte\" # This is the git tag that the release is tied to tag = \"v0.3.0\"","title":"GitHub metadata"},{"location":"usage-advanced.html#adding-other-mods","text":"Sometimes you may want to include a mod that isn't hosted on one of the supported services, and might want to manually add it. Fortunately this isn't too difficult, and some steps will be outlined below: Find the download URL of the mod JAR, for example https://example.com/mod-1.0.0.jar In order for pack-it to verify that the JAR has downloaded correctly, you need to calculate the SHA-1 hash of the file. A quick way to do this on linux is with the following command: 1 curl <download url> | sha1sum What does that command do? If you are curious as to what the command does does (good for you :D), then you can have a look at an explanation on explainshell It will output something like the following: 1 4a3ce8ee11e091dd7923f4d8c6e5b5e41ec7c047 - The first part of this (the 40 hex characters) is the hash that you need. Add the following new section to your pack.toml file, being sure to replace all the values 1 2 3 4 5 [installed_mods.<mod name>] name = \"<mod name>\" download_url = \"<download url>\" download_hash = \"<hash that was calculated in step 2>\" output_path = \"./mods/<file name>.jar\"","title":"Adding other mods"},{"location":"usage-advanced.html#adding-things-other-than-mods","text":"pack-it can be used to automatically download other files as well as just your mods; eg. resource packs or config files. As long as you can host the file on a webserver somewhere (eg. GitHub Pages or Vercel ), you can distribute them with the pack simply by including them as an installed_mods , with a different output_path set. See Adding other mods for more details on the process","title":"Adding things other than mods"},{"location":"usage.html","text":"Basic usage Creating a pack In your terminal, navigate to the location of the .minecraft (or whatever your launcher uses) where you want to manage the mods. pack-it uses a file called pack.toml to store the list of mods and the information required to download them, and so to create an empty pack.toml , you can use pack-it init and answer the questions it asks: This will create a pack.toml like the following: 1 2 3 4 5 6 pack_name = \"Example Pack\" author = \"Tom_The_Geek\" accepted_game_versions = [\"1.17\"] mod_loader = \"fabric\" [installed_mods] Adding mods Once you have a pack.toml ready to go, you'll probably want to start adding mods. Info pack-it natively supports adding mods from CurseForge , Modrinth and GitHub releases . To add mods from elsewhere you will have to manually edit the pack.toml file. CurseForge To install mods from CurseForge, you can use the command pack-it curseforge-add <...mod slugs> like so: Help To obtain the slugs of mods you want to add, open the mod's page in your browser, and look at the last part of the mod's URL For example, Fabric API's page is https://www.curseforge.com/minecraft/mc-mods/fabric-api , and so the slug is fabric-api . Modrinth To install mods from Modrinth, you can use the command pack-it modrinth-add <...mod slugs> like so: Info pack-it modrinth-add supports several methods of specifying exactly what you want to add to the pack. You can use any of the following forms: <mod slug> , <mod slug>:<version id> , <mod id> or <mod id>:<version id> GitHub Releases To install a mod from a GitHub release, you can use pack-it github-add <owner> <repo> <tag> like so: Warning It is recommended to set the GITHUB_TOKEN environment variable to a GitHub Personal Access Token (PAT) in order to avoid pack-it from encountering rate-limiting issues. If you don't do this, pack-it will display a warning when using the github-add subcommand. You can do this on linux like this: GITHUB_TOKEN=<token goes here> pack-it github-add . Updating mods 1 // TODO: Implement this Removing mods To remove mods from the pack, you can use pack-it remove <...mods> like so: Downloading the mods When running pack-it *-add , mod JARs are not automatically downloaded into the mods/ folder, so in order to trigger a download of any changed mods, you need to run pack-it download-mods , which will result in an output like this: which means that all of your mods will have been magically downloaded!","title":"Basic usage"},{"location":"usage.html#basic-usage","text":"","title":"Basic usage"},{"location":"usage.html#creating-a-pack","text":"In your terminal, navigate to the location of the .minecraft (or whatever your launcher uses) where you want to manage the mods. pack-it uses a file called pack.toml to store the list of mods and the information required to download them, and so to create an empty pack.toml , you can use pack-it init and answer the questions it asks: This will create a pack.toml like the following: 1 2 3 4 5 6 pack_name = \"Example Pack\" author = \"Tom_The_Geek\" accepted_game_versions = [\"1.17\"] mod_loader = \"fabric\" [installed_mods]","title":"Creating a pack"},{"location":"usage.html#adding-mods","text":"Once you have a pack.toml ready to go, you'll probably want to start adding mods. Info pack-it natively supports adding mods from CurseForge , Modrinth and GitHub releases . To add mods from elsewhere you will have to manually edit the pack.toml file.","title":"Adding mods"},{"location":"usage.html#curseforge","text":"To install mods from CurseForge, you can use the command pack-it curseforge-add <...mod slugs> like so: Help To obtain the slugs of mods you want to add, open the mod's page in your browser, and look at the last part of the mod's URL For example, Fabric API's page is https://www.curseforge.com/minecraft/mc-mods/fabric-api , and so the slug is fabric-api .","title":"CurseForge"},{"location":"usage.html#modrinth","text":"To install mods from Modrinth, you can use the command pack-it modrinth-add <...mod slugs> like so: Info pack-it modrinth-add supports several methods of specifying exactly what you want to add to the pack. You can use any of the following forms: <mod slug> , <mod slug>:<version id> , <mod id> or <mod id>:<version id>","title":"Modrinth"},{"location":"usage.html#github-releases","text":"To install a mod from a GitHub release, you can use pack-it github-add <owner> <repo> <tag> like so: Warning It is recommended to set the GITHUB_TOKEN environment variable to a GitHub Personal Access Token (PAT) in order to avoid pack-it from encountering rate-limiting issues. If you don't do this, pack-it will display a warning when using the github-add subcommand. You can do this on linux like this: GITHUB_TOKEN=<token goes here> pack-it github-add .","title":"GitHub Releases"},{"location":"usage.html#updating-mods","text":"1 // TODO: Implement this","title":"Updating mods"},{"location":"usage.html#removing-mods","text":"To remove mods from the pack, you can use pack-it remove <...mods> like so:","title":"Removing mods"},{"location":"usage.html#downloading-the-mods","text":"When running pack-it *-add , mod JARs are not automatically downloaded into the mods/ folder, so in order to trigger a download of any changed mods, you need to run pack-it download-mods , which will result in an output like this: which means that all of your mods will have been magically downloaded!","title":"Downloading the mods"}]}